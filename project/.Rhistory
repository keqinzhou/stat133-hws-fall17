quantile(v,probs=c(0.1),names=F)
}
#title: getting 90th percentile of the vector
#description: This function takes a vector and if na.rm is true it returns the 90th percentile with NAs removed.
#If na.rm is false, it returns 90th percentile with NAs.
#inputs: a vector and na.rm
#outputs: the 90th percentile of the input
get_percentile90 <- function(v,na.rm){
if (is.numeric(v)==FALSE){
stop('non-numeric argument')
}
if (na.rm==TRUE){
v <- remove_missing(v)
}
quantile(v,probs=c(0.9),names=F)
}
#title: getting the median of a vector
#description: This function takes a vector and if na.rm is true it returns the median with NAs removed.
#If na.rm is false, it returns the median with NAs.
#inputs: a vector and na.rm
#outputs: the median of the input
get_median <- function(v,na.rm){
if (is.numeric(v)==FALSE){
stop('non-numeric argument')
}
if (na.rm==TRUE){
v <- remove_missing(v)
}
v <- sort(v)
if(length(v) %% 2 == 0){
median <- (v[length(v)/2]+v[length(v)/2+1])/2
}
else{
median <-  v[(length(v)+1)/2]
}
median}
#title: getting the average of a vector
#description: This function takes a vector and if na.rm is true it returns the average with NAs removed.
#If na.rm is false, it returns the average with NAs.
#inputs: a vector and na.rm
#outputs: the average of the input
get_average <- function(v,na.rm){
if (is.numeric(v)==FALSE){
stop('non-numeric argument')
}
if (na.rm==TRUE){
v <- remove_missing(v)
}
avg <- 0
for(i in 1:length(v)){
avg <- avg + v[i]/length(v)
}
avg
}
#title: getting the standard deviation of a vector
#description: This function takes a vector and if na.rm is true it returns the standard deviation with NAs removed.
#If na.rm is false, it returns the standard deviation with NAs.
#inputs: a vector and na.rm
#outputs: the sd of the input
get_stdev <- function(v,na.rm){
if (is.numeric(v)==FALSE){
stop('non-numeric argument')
}
if (na.rm==TRUE){
v <- remove_missing(v)
}
sd <- 0
avg <- get_average(v,na.rm=FALSE)
for(i in 1:length(v)){
sd <- sd + (v[i]-avg)^2
}
sqrt(1/(length(v)-1)*sd)
}
#title: getting the 1st quartile of a vector
#description: This function takes a vector and if na.rm is true it returns the 1st quartile with NAs removed.
#If na.rm is false, it returns the 1st quartile with NAs.
#inputs: a vector and na.rm
#outputs: the 1st quartile of the input
get_quartile1 <- function(v,na.rm){
if (is.numeric(v)==FALSE){
stop('non-numeric argument')
}
if (na.rm==TRUE){
v <- remove_missing(v)
}
quantile(v,probs=c(0.25),names=F)
}
#title: getting the 3rd quartile of a vector
#description: This function takes a vector and if na.rm is true it returns the 3rd quartile with NAs removed.
#If na.rm is false, it returns the 3rd quartile with NAs.
#inputs: a vector and na.rm
#outputs: the 3rd quartile of the input
get_quartile3 <- function(v,na.rm){
if (is.numeric(v)==FALSE){
stop('non-numeric argument')
}
if (na.rm==TRUE){
v <- remove_missing(v)
}
quantile(v,probs=c(0.75),names=F)
}
#title: counting the number of missing values
#description: This function takes a vector and it returns the number of NAs in the input.
#inputs: a vector
#outputs: the number of NAs
count_missing <- function(v){
n <- length(v)
n_2 <- length(remove_missing(v))
n-n_2
}
#title: getting the summary statistics of a vector
#description: This function takes a vector and returns the list of summary statistics with NAs removed.
#inputs: a vector
#outputs: a list of summary statistics
summary_stats <- function(v){
list(minimum = get_minimum(v,na.rm=TRUE),
percent10 = get_percentile10(v,na.rm=TRUE),
quartile1 = get_quartile1(v,na.rm=TRUE),
median = get_median(v,na.rm=TRUE),
mean = get_average(v,na.rm=TRUE),
quartile3 = get_quartile3(v,na.rm=TRUE),
percent90 = get_percentile90(v,na.rm=TRUE),
maximum = get_maximum(v,na.rm=TRUE),
range = get_range(v,na.rm=TRUE),
stdev = get_stdev(v,na.rm=TRUE),
missing = count_missing(v)
)
}
#title: printing the statistics of the input
#description: This function takes a list of summary statistics and prints the value in a nice format.
#inputs: a list
#outputs: print of the list
print_stats <- function(stats){
a <- data.frame(header=FALSE)
for (i in 1:length(stats)){
a[i,1] <- paste("## ", names(stats)[i], sep='')
a[i,2] <- paste(": ",sprintf('%.4f',stats[[i]]), sep='')
}
names(a) <- NULL
print.data.frame(a,right=F)
}
#title: rescaling function
#description: This function takes a vector and rescale it with a scale from 0 to 100.
#inputs: a vector, xmin and xmax
#outputs: the rescaled vector
rescale100  <- function(b,xmin,xmax){
100*(b-xmin)/(xmax-xmin)
}
#title: dropping the lowest value
#description: This function takes a numeric vector and returns a vector by dropping the lowest value.
#inputs: a vector of length n
#outputs: a vector of length n-1
drop_lowest <- function(b){
idx <- which.min(b)
b <- b[-idx]
b
}
#title: average score of homework
#description: This function takes a numeric vector of homework scores and an optional logical
#argument drop, to compute a single homework value. If drop is true, the function returns the average
#value with the lowest homework score dropped.
#inputs: a numeric vector
#outputs: average homework score
score_homework <- function(hws,drop){
if(drop==TRUE){
hws <- drop_lowest(hws)
}
avg <- 0
for(i in 1:length(hws)){
avg <- avg + hws[i]/length(hws)
}
avg
}
#title: average score of quizzes
#description: This function takes a numeric vector of quiz scores and an optional logical
#argument drop, to compute a single quiz value. If drop is true, the function returns the average
#value with the lowest quiz score dropped.
#inputs: a numeric vector
#outputs: average quiz score
score_quiz <- function(quizzes,drop){
if(drop==TRUE){
quizzes <- drop_lowest(quizzes)
}
avg <- 0
for(i in 1:length(quizzes)){
avg <- avg + quizzes[i]/length(quizzes)
}
avg
}
#title:lab score
#description: This function takes a numeric vector of lab attendance and returns the lab score.
#inputs: number of lab attended
#outputs: the lab score
score_lab <- function(a){
if (a==11|a==12){
100}
else if (a==10){
80}
else if (a==9){
60}
else if (a==8){
40}
else if (a==7){
20}
else if (a <= 6){
0}
}
source('code/functions.R')
dat <- read.csv('data/rawdata/rawscores.csv',header=TRUE)
dat[is.na(dat)] <- 0
# rescale quizzes
dat$QZ1 <- rescale100(dat$QZ1,0,12)
dat$QZ2 <- rescale100(dat$QZ2,0,18)
dat$QZ3 <- rescale100(dat$QZ3,0,20)
dat$QZ4 <- rescale100(dat$QZ4,0,20)
# rescale exams
dat$Test1 <- rescale100(dat$EX1,0,80)
dat$Test2 <- rescale100(dat$EX2,0,90)
#rescale ATT
dat$Lab <- rescale100(dat$ATT,0,12)
#rescale lab
#Homework with dropping the lowest one
Homework <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Homework[i] <- score_homework(dat[i,1:9],drop=TRUE)
}
dat$Homework <- as.numeric(Homework)
#Quiz with dropping the lowest one
Quiz <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Quiz[i] <- score_quiz(dat[i,11:14],drop=TRUE)
}
dat$Quiz <- as.numeric(Quiz)
# overall
Overall <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Overall[i] <- 0.1*dat$Lab[i]+0.3*dat$Homework[i]+0.15*dat$Quiz[i]+0.2*dat$Test1[i]+0.25*dat$Test2[i]
}
dat$Overall <- as.numeric(Overall)
# grade calculation
g <- function(a){
if (a>=0 & a<50){
'F'
}
else if (a>=50 & a<60){
'D'
}
else if (a>=60 & a<70){
'C-'
}
else if (a>=70 & a<77.5){
'C'
}
else if (a>=77.5 & a<79.5){
'C+'
}
else if (a>=79.5 & a<82){
'B-'
}
else if (a>=82 & a<86){
'B'
}
else if (a>=86 & a<88){
'B+'
}
else if (a>=88 & a<90){
'A-'
}
else if (a>=90 & a<95){
'A'
}
else if (a>=95 & a<=100){
'A+'
}
}
grade <- as.numeric(matrix(NA, nrow=334,ncol=1))
for (i in 1:334){
grade[i] <- g(dat$Overall[i])
}
dat$Grade <- grade
#sink()
c <- cbind(dat$Lab,dat$Homework,dat$Quiz,dat$Test1,dat$Test2,dat$Overall)
name <- c('Lab-stats.txt','Homework-stats.txt','Quiz-stats.txt','Test1-stats.txt','Test2-stats.txt','Overall-stats.txt')
for (i in 1: 6){
stats <- summary_stats(c[,i])
p <- paste('output/',name[i],sep='')
sink(file=p)
print_stats(stats)
sink()
}
sink(file='output/summary-cleanscores.txt')
str(dat)
sink()
write.csv(dat,'data/cleandata/cleanscores.csv')
runApp('app/gradevis.R')
drop_lowest(c(4,5,2,4))
b[-idx]
drop_lowest <- function(b){
idx <- which.min(b)
b[-idx]
}
drop_lowest(c(4,5,2,4))
score_homework(c(2,3,5),drop=T)
score_quiz(c(2,3,5),drop=T)
score_quiz(c(100,80,30,70,75,85,drop=T)
score_quiz(c(100,80,30,70,75,85,drop=T)
score_quiz(c(100,80,30,70,75,85),drop=T)
score_quiz(c(100,80,30,70,75,85),drop=F)
score_homework(c(100,80,30,70,75,85),drop=T)
dat[1,11:14]
dat[1,1:9]
dat$Overall < 50
dat(dat$Overall<50)
dat[dat$Overall<50]
dat[dat$Overall<50,1]
runApp('app/gradevis.R')
runApp('app/gradevis.R')
runApp('app/gradevis.R')
runApp('app/gradevis.R')
runApp('app/gradevis.R')
runApp('app/gradevis.R')
runApp('app/gradevis.R')
View(dat)
View(dat)
View(dat)
10+0.3*97.5+。15*92.222+0.2*72+0.25*83
10+0.3*97.5+。15*92.222+0.2*72+0.25*83
10+0.3*97.5+0.15*92.222+0.2*72+0.25*83
source('code/functions.R')
dat <- read.csv('data/rawdata/rawscores.csv',header=TRUE)
dat[is.na(dat)] <- 0
# rescale quizzes
dat$QZ1 <- rescale100(dat$QZ1,0,12)
dat$QZ2 <- rescale100(dat$QZ2,0,18)
dat$QZ3 <- rescale100(dat$QZ3,0,20)
dat$QZ4 <- rescale100(dat$QZ4,0,20)
# rescale exams
dat$Test1 <- rescale100(dat$EX1,0,80)
dat$Test2 <- rescale100(dat$EX2,0,90)
#rescale ATT
dat$Lab <- score_lab(dat$ATT)
#rescale lab
#Homework with dropping the lowest one
Homework <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Homework[i] <- score_homework(dat[i,1:9],drop=TRUE)
}
dat$Homework <- as.numeric(Homework)
#Quiz with dropping the lowest one
Quiz <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Quiz[i] <- score_quiz(dat[i,11:14],drop=TRUE)
}
dat$Quiz <- as.numeric(Quiz)
# overall
Overall <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Overall[i] <- 0.1*dat$Lab[i]+0.3*dat$Homework[i]+0.15*dat$Quiz[i]+0.2*dat$Test1[i]+0.25*dat$Test2[i]
}
dat$Overall <- as.numeric(Overall)
# grade calculation
g <- function(a){
if (a>=0 & a<50){
'F'
}
else if (a>=50 & a<60){
'D'
}
else if (a>=60 & a<70){
'C-'
}
else if (a>=70 & a<77.5){
'C'
}
else if (a>=77.5 & a<79.5){
'C+'
}
else if (a>=79.5 & a<82){
'B-'
}
else if (a>=82 & a<86){
'B'
}
else if (a>=86 & a<88){
'B+'
}
else if (a>=88 & a<90){
'A-'
}
else if (a>=90 & a<95){
'A'
}
else if (a>=95 & a<=100){
'A+'
}
}
grade <- as.numeric(matrix(NA, nrow=334,ncol=1))
for (i in 1:334){
grade[i] <- g(dat$Overall[i])
}
dat$Grade <- grade
#sink()
c <- cbind(dat$Lab,dat$Homework,dat$Quiz,dat$Test1,dat$Test2,dat$Overall)
name <- c('Lab-stats.txt','Homework-stats.txt','Quiz-stats.txt','Test1-stats.txt','Test2-stats.txt','Overall-stats.txt')
for (i in 1: 6){
stats <- summary_stats(c[,i])
p <- paste('output/',name[i],sep='')
sink(file=p)
print_stats(stats)
sink()
}
sink(file='output/summary-cleanscores.txt')
str(dat)
sink()
write.csv(dat,'data/cleandata/cleanscores.csv')
runApp('app/gradevis.R')
View(dat)
View(dat)
score_lab(dat$ATT)
source('code/functions.R')
dat <- read.csv('data/rawdata/rawscores.csv',header=TRUE)
dat[is.na(dat)] <- 0
# rescale quizzes
dat$QZ1 <- rescale100(dat$QZ1,0,12)
dat$QZ2 <- rescale100(dat$QZ2,0,18)
dat$QZ3 <- rescale100(dat$QZ3,0,20)
dat$QZ4 <- rescale100(dat$QZ4,0,20)
# rescale exams
dat$Test1 <- rescale100(dat$EX1,0,80)
dat$Test2 <- rescale100(dat$EX2,0,90)
#rescale ATT
Lab <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:334){
Lab[i] <- score_lab(dat[i,10])
}
dat$Lab <- as.numeric(Lab)
#rescale lab
#Homework with dropping the lowest one
Homework <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Homework[i] <- score_homework(dat[i,1:9],drop=TRUE)
}
dat$Homework <- as.numeric(Homework)
#Quiz with dropping the lowest one
Quiz <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Quiz[i] <- score_quiz(dat[i,11:14],drop=TRUE)
}
dat$Quiz <- as.numeric(Quiz)
# overall
Overall <- matrix(NA,nrow=nrow(dat),ncol=1)
for (i in 1:nrow(dat)){
Overall[i] <- 0.1*dat$Lab[i]+0.3*dat$Homework[i]+0.15*dat$Quiz[i]+0.2*dat$Test1[i]+0.25*dat$Test2[i]
}
dat$Overall <- as.numeric(Overall)
# grade calculation
g <- function(a){
if (a>=0 & a<50){
'F'
}
else if (a>=50 & a<60){
'D'
}
else if (a>=60 & a<70){
'C-'
}
else if (a>=70 & a<77.5){
'C'
}
else if (a>=77.5 & a<79.5){
'C+'
}
else if (a>=79.5 & a<82){
'B-'
}
else if (a>=82 & a<86){
'B'
}
else if (a>=86 & a<88){
'B+'
}
else if (a>=88 & a<90){
'A-'
}
else if (a>=90 & a<95){
'A'
}
else if (a>=95 & a<=100){
'A+'
}
}
grade <- as.numeric(matrix(NA, nrow=334,ncol=1))
for (i in 1:334){
grade[i] <- g(dat$Overall[i])
}
dat$Grade <- grade
#sink()
c <- cbind(dat$Lab,dat$Homework,dat$Quiz,dat$Test1,dat$Test2,dat$Overall)
name <- c('Lab-stats.txt','Homework-stats.txt','Quiz-stats.txt','Test1-stats.txt','Test2-stats.txt','Overall-stats.txt')
for (i in 1: 6){
stats <- summary_stats(c[,i])
p <- paste('output/',name[i],sep='')
sink(file=p)
print_stats(stats)
sink()
}
sink(file='output/summary-cleanscores.txt')
str(dat)
sink()
write.csv(dat,'data/cleandata/cleanscores.csv')
runApp('app/gradevis.R')
runApp('app/gradevis.R')
